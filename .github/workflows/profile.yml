name: Mobile Performance Profiling

on:
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to profile'
        required: true
        default: 'android'
        type: choice
        options:
          - android
          - ios
          - both
      duration:
        description: 'Profiling duration (seconds)'
        required: false
        default: '60'
        type: string
  schedule:
    # Run profiling weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  push:
    branches: [main]
    paths:
      - 'mobile/**'
      - '.github/workflows/profile.yml'

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'

jobs:
  profile-android:
    if: ${{ github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' || github.event.inputs.platform == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: 📱 Checkout code
        uses: actions/checkout@v4

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd mobile && npm ci

      - name: 🛠️ Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 30
          build-tools: 34.0.0
          cmake: 3.22.1
          ndk: 25.1.8937393

      - name: 🎯 Create AVD
        run: |
          echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "system-images;android-30;google_apis;x86_64"
          echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n Pixel_4_API_30 -k "system-images;android-30;google_apis;x86_64" --force
        
      - name: 🚀 Start Android Emulator
        run: |
          echo "Starting emulator"
          nohup $ANDROID_HOME/emulator/emulator -avd Pixel_4_API_30 -no-audio -no-window -gpu swiftshader_indirect -no-snapshot -wipe-data &
          echo "Waiting for emulator to boot"
          $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
          echo "Emulator booted"

      - name: 🔧 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ Build profiling APK
        run: |
          cd mobile
          NODE_ENV=profiling eas build --platform android --profile profiling --local --output ../artifacts/app-profiling.apk
        env:
          EXPO_PUBLIC_PROFILING: 'true'

      - name: 📊 Run performance profiling
        run: |
          export PROFILING_DURATION=${{ github.event.inputs.duration || '60' }}000
          npm run profile:android
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}

      - name: 📈 Analyze performance data
        run: |
          node scripts/analyze-performance.js --platform android --input artifacts/profiling/
        continue-on-error: true

      - name: 📄 Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-performance-artifacts-${{ github.run_number }}
          path: |
            artifacts/profiling/perf-marks-android-*.json
            artifacts/profiling/energy-report-android-*.json
            artifacts/profiling/profiling-summary-android-*.json
            artifacts/profiling/analysis-*.json
          retention-days: 30

      - name: 📊 Comment performance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const artifactsDir = 'artifacts/profiling';
              const summaryFiles = fs.readdirSync(artifactsDir)
                .filter(f => f.startsWith('profiling-summary-android'))
                .map(f => path.join(artifactsDir, f));
              
              if (summaryFiles.length > 0) {
                const summary = JSON.parse(fs.readFileSync(summaryFiles[0], 'utf8'));
                
                const comment = `## 📱 Android Performance Profile
                
**Duration:** ${summary.duration / 1000}s
**Platform:** ${summary.platform}
**Timestamp:** ${summary.timestamp}

### 🚀 Startup Metrics
${summary.performanceMarks ? 
  summary.performanceMarks.map(mark => `- **${mark.name}:** ${mark.time}ms`).join('\n') :
  'No performance marks captured'
}

### 🔋 Energy Usage
${summary.energyUsage ? 
  '- Battery impact: ' + (summary.energyUsage.batteryLevel || 'N/A') :
  'No energy data captured'
}

### 📊 Artifacts
${summary.artifacts.map(artifact => `- \`${artifact}\``).join('\n')}
                `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Failed to create performance comment:', error);
            }

  profile-ios:
    if: ${{ (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both') && runner.os == 'macOS' }}
    runs-on: macos-14
    timeout-minutes: 45
    
    steps:
      - name: 📱 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd mobile && npm ci

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: 📱 List available simulators
        run: xcrun simctl list devices

      - name: 🚀 Start iOS Simulator
        run: |
          xcrun simctl boot "iPhone 15"
          sleep 10

      - name: 🔧 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 🏗️ Build profiling IPA
        run: |
          cd mobile
          NODE_ENV=profiling eas build --platform ios --profile profiling --local --output ../artifacts/app-profiling.ipa
        env:
          EXPO_PUBLIC_PROFILING: 'true'
          EXPO_APPLE_TEAM_ID: ${{ secrets.EXPO_APPLE_TEAM_ID }}

      - name: 📊 Run performance profiling
        run: |
          export PROFILING_DURATION=${{ github.event.inputs.duration || '60' }}000
          npm run profile:ios

      - name: 📈 Analyze performance data
        run: |
          node scripts/analyze-performance.js --platform ios --input artifacts/profiling/
        continue-on-error: true

      - name: 📄 Upload performance artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ios-performance-artifacts-${{ github.run_number }}
          path: |
            artifacts/profiling/perf-marks-ios-*.json
            artifacts/profiling/energy-report-ios-*.json
            artifacts/profiling/profiling-summary-ios-*.json
            artifacts/profiling/analysis-*.json
          retention-days: 30

      - name: 🧹 Cleanup
        if: always()
        run: |
          xcrun simctl shutdown all

  analyze-regression:
    needs: [profile-android, profile-ios]
    if: always() && (needs.profile-android.result == 'success' || needs.profile-ios.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: 📱 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download Android artifacts
        if: needs.profile-android.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: android-performance-artifacts-${{ github.run_number }}
          path: artifacts/android/

      - name: 📥 Download iOS artifacts
        if: needs.profile-ios.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: ios-performance-artifacts-${{ github.run_number }}
          path: artifacts/ios/

      - name: 📊 Generate regression analysis
        run: |
          node scripts/performance-regression-analysis.js \
            --android artifacts/android/ \
            --ios artifacts/ios/ \
            --baseline ${{ github.ref_name == 'main' && 'main' || 'HEAD~1' }} \
            --output artifacts/regression-analysis.json

      - name: 🚨 Check performance thresholds
        run: |
          node scripts/check-performance-thresholds.js \
            --input artifacts/regression-analysis.json \
            --fail-on-regression

      - name: 📄 Upload regression analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-regression-analysis-${{ github.run_number }}
          path: artifacts/regression-analysis.json
          retention-days: 90

      - name: 📊 Update performance dashboard
        if: github.ref == 'refs/heads/main'
        run: |
          node scripts/update-performance-dashboard.js \
            --input artifacts/regression-analysis.json \
            --branch main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}