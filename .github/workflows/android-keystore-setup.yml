name: Android Keystore & Google Play Setup

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'setup'
        type: choice
        options:
          - setup
          - verify
          - deploy
      environment:
        description: 'Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  ANDROID_COMPILE_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"
  ANDROID_SDK_TOOLS: "4333796"

jobs:
  android-keystore-setup:
    if: github.event.inputs.action == 'setup'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate Android keystore
        run: |
          # Create directories
          mkdir -p android/keystores android/config
          
          # Generate keystore
          keytool -genkey -v \
            -keystore android/keystores/phonocorrectai-release-key.keystore \
            -alias phonocorrectai-key-alias \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10000 \
            -storepass "${{ secrets.ANDROID_STORE_PASSWORD }}" \
            -keypass "${{ secrets.ANDROID_KEY_PASSWORD }}" \
            -dname "CN=PhonoCorrect AI, OU=Development, O=PhonoCorrect AI, L=San Francisco, ST=CA, C=US"

      - name: Verify keystore
        run: |
          keytool -list -v \
            -keystore android/keystores/phonocorrectai-release-key.keystore \
            -storepass "${{ secrets.ANDROID_STORE_PASSWORD }}"

      - name: Generate base64 keystore
        run: |
          base64 -i android/keystores/phonocorrectai-release-key.keystore | tr -d '\n' > keystore.base64
          echo "Add this to ANDROID_KEYSTORE_BASE64 secret:"
          cat keystore.base64

      - name: Upload keystore artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-keystore-${{ github.event.inputs.environment }}
          path: |
            android/keystores/phonocorrectai-release-key.keystore
            keystore.base64
          retention-days: 7

  android-keystore-verify:
    if: github.event.inputs.action == 'verify'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Restore keystore from base64
        run: |
          mkdir -p android/keystores
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystores/phonocorrectai-release-key.keystore

      - name: Verify keystore integrity
        run: |
          keytool -list -v \
            -keystore android/keystores/phonocorrectai-release-key.keystore \
            -storepass "${{ secrets.ANDROID_STORE_PASSWORD }}"

      - name: Check required secrets
        run: |
          echo "Checking required secrets..."
          
          if [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "‚ùå ANDROID_KEYSTORE_BASE64 secret is missing"
            exit 1
          else
            echo "‚úÖ ANDROID_KEYSTORE_BASE64 is configured"
          fi
          
          if [ -z "${{ secrets.ANDROID_STORE_PASSWORD }}" ]; then
            echo "‚ùå ANDROID_STORE_PASSWORD secret is missing"
            exit 1
          else
            echo "‚úÖ ANDROID_STORE_PASSWORD is configured"
          fi
          
          if [ -z "${{ secrets.ANDROID_KEY_PASSWORD }}" ]; then
            echo "‚ùå ANDROID_KEY_PASSWORD secret is missing"
            exit 1
          else
            echo "‚úÖ ANDROID_KEY_PASSWORD is configured"
          fi
          
          if [ -z "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" ]; then
            echo "‚ö†Ô∏è GOOGLE_PLAY_SERVICE_ACCOUNT_JSON secret is missing"
            echo "This is required for automated Play Store uploads"
          else
            echo "‚úÖ GOOGLE_PLAY_SERVICE_ACCOUNT_JSON is configured"
          fi

  android-build-and-deploy:
    if: github.event.inputs.action == 'deploy'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd mobile
          npm ci

      - name: Restore keystore from base64
        run: |
          mkdir -p android/keystores
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystores/phonocorrectai-release-key.keystore

      - name: Build Android APK
        run: |
          cd mobile
          
          # Set signing configuration
          export ANDROID_KEYSTORE_PATH="../android/keystores/phonocorrectai-release-key.keystore"
          export ANDROID_KEY_ALIAS="phonocorrectai-key-alias"
          export ANDROID_STORE_PASSWORD="${{ secrets.ANDROID_STORE_PASSWORD }}"
          export ANDROID_KEY_PASSWORD="${{ secrets.ANDROID_KEY_PASSWORD }}"
          
          # Build signed APK
          npm run build:android:release

      - name: Verify APK signature
        run: |
          # Verify the APK is properly signed
          apksigner verify --verbose mobile/android/app/build/outputs/apk/release/app-release.apk

      - name: Upload to Google Play (Internal Testing)
        if: github.event.inputs.environment == 'staging'
        run: |
          # Install Google Play CLI tool
          pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
          
          # Create service account credentials
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 -d > service-account.json
          
          # Upload to Google Play Internal Testing
          python scripts/upload-to-play-console.py \
            --service-account service-account.json \
            --package-name com.phonocorrectai.app \
            --apk mobile/android/app/build/outputs/apk/release/app-release.apk \
            --track internal

      - name: Upload to Google Play (Production)
        if: github.event.inputs.environment == 'production'
        run: |
          # Create service account credentials
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 -d > service-account.json
          
          # Upload to Google Play Production
          python scripts/upload-to-play-console.py \
            --service-account service-account.json \
            --package-name com.phonocorrectai.app \
            --apk mobile/android/app/build/outputs/apk/release/app-release.apk \
            --track production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-release-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: |
            mobile/android/app/build/outputs/apk/release/app-release.apk
            mobile/android/app/build/outputs/bundle/release/app-release.aab

      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f android/keystores/phonocorrectai-release-key.keystore
          rm -f service-account.json
          rm -f keystore.base64

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          echo "üîç Scanning for sensitive information..."
          
          # Check for accidentally committed keystores
          if find . -name "*.keystore" -o -name "*.jks" | grep -v ".git"; then
            echo "‚ùå Found keystore files in repository!"
            echo "Remove them immediately and add to .gitignore"
            exit 1
          else
            echo "‚úÖ No keystore files found in repository"
          fi
          
          # Check for hardcoded passwords
          if grep -r "storePassword\|keyPassword" --include="*.gradle" --include="*.java" --include="*.kt" . | grep -v "System.getenv\|project.findProperty"; then
            echo "‚ùå Found hardcoded passwords!"
            echo "Use environment variables instead"
            exit 1
          else
            echo "‚úÖ No hardcoded passwords found"
          fi
          
          # Check for service account JSON files
          if find . -name "*service-account*.json" -o -name "*google-services*.json" | head -1 | grep -v ".git"; then
            echo "‚ö†Ô∏è Found potential service account files"
            echo "Ensure these are not committed to version control"
          else
            echo "‚úÖ No service account files found in repository"
          fi