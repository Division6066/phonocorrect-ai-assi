name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.0.0'

jobs:
  # Lint and Test
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  # Build Web Apps
  build-web:
    name: Build Web Apps
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Build web app
        run: pnpm --filter web build

      - name: Build Chrome extension
        run: pnpm --filter chrome-ext build

      - name: Package Chrome extension
        run: |
          cd chrome-ext/dist
          zip -r ../phonocorrect-chrome-extension.zip .

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: web/.next

      - name: Upload Chrome extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension
          path: chrome-ext/phonocorrect-chrome-extension.zip

  # Build Desktop Apps
  build-desktop:
    name: Build Desktop Apps
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Build and package desktop app
        run: pnpm --filter desktop dist

      - name: Upload desktop artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-linux
          path: |
            desktop/electron-dist/*.AppImage
            desktop/electron-dist/*.deb

      - name: Upload desktop artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-windows
          path: |
            desktop/electron-dist/*.exe
            desktop/electron-dist/*.zip

      - name: Upload desktop artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-macos
          path: |
            desktop/electron-dist/*.dmg
            desktop/electron-dist/*.zip

  # Build Mobile Apps
  build-mobile:
    name: Build Mobile Apps
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Build Android APK (Debug)
        run: |
          cd mobile
          expo build:android --type apk --no-publish

      - name: Upload Android APK
        uses: actions/upload-artifact@v3
        with:
          name: android-apk-debug
          path: mobile/build/*.apk

  # Build iOS (macOS only)
  build-ios:
    name: Build iOS App
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Build iOS Archive (Debug)
        run: |
          cd mobile
          expo build:ios --type archive --no-publish

      - name: Upload iOS Archive
        uses: actions/upload-artifact@v3
        with:
          name: ios-archive-debug
          path: mobile/build/*.ipa

  # Build Android Keyboard
  build-android-keyboard:
    name: Build Android Keyboard
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Build Android Keyboard AAR
        run: |
          cd keyboard-android
          ./gradlew assembleRelease

      - name: Upload Android Keyboard AAR
        uses: actions/upload-artifact@v3
        with:
          name: android-keyboard-aar
          path: keyboard-android/build/outputs/aar/*.aar

  # Build iOS Keyboard
  build-ios-keyboard:
    name: Build iOS Keyboard
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS Keyboard Framework
        run: |
          cd keyboard-ios
          swift build

      - name: Create iOS Keyboard Archive
        run: |
          cd keyboard-ios
          tar -czf phonocorrect-ios-keyboard.tar.gz Sources/

      - name: Upload iOS Keyboard Archive
        uses: actions/upload-artifact@v3
        with:
          name: ios-keyboard-framework
          path: keyboard-ios/phonocorrect-ios-keyboard.tar.gz

  # Create Release
  release:
    name: Create Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: 
      - build-web
      - build-desktop
      - build-mobile
      - build-ios
      - build-android-keyboard
      - build-ios-keyboard
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          # Upload desktop apps
          for file in desktop-*/*; do
            echo "Uploading $file"
            gh release upload v${{ github.run_number }} "$file" --clobber
          done
          
          # Upload mobile apps
          gh release upload v${{ github.run_number }} android-apk-debug/*.apk --clobber
          gh release upload v${{ github.run_number }} ios-archive-debug/*.ipa --clobber
          
          # Upload Chrome extension
          gh release upload v${{ github.run_number }} chrome-extension/*.zip --clobber
          
          # Upload keyboard modules
          gh release upload v${{ github.run_number }} android-keyboard-aar/*.aar --clobber
          gh release upload v${{ github.run_number }} ios-keyboard-framework/*.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}