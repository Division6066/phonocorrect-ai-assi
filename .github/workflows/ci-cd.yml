name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.0.0'

jobs:
  # Lint and Test
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm type-check

      - name: Lint
        run: pnpm lint

      - name: Test
        run: pnpm test

  # Build Web Apps
  build-web:
    name: Build Web Apps
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Build web app
        run: pnpm --filter web build

      - name: Build Chrome extension
        run: pnpm --filter chrome-ext build

      - name: Package Chrome extension
        run: |
          cd chrome-ext/dist
          zip -r ../phonocorrect-chrome-extension.zip .

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: web/.next

      - name: Upload Chrome extension artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension
          path: chrome-ext/phonocorrect-chrome-extension.zip

  # Build Desktop Apps
  build-desktop:
    name: Build Desktop Apps
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Build and package desktop app
        run: pnpm --filter desktop dist

      - name: Upload desktop artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-linux
          path: |
            desktop/electron-dist/*.AppImage
            desktop/electron-dist/*.deb

      - name: Upload desktop artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-windows
          path: |
            desktop/electron-dist/*.exe
            desktop/electron-dist/*.zip

      - name: Upload desktop artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: desktop-macos
          path: |
            desktop/electron-dist/*.dmg
            desktop/electron-dist/*.zip

  # Build Mobile Apps with EAS
  build-android:
    name: Build Android APK
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli eas-cli

      - name: EAS Build (Android)
        working-directory: ./mobile
        run: |
          eas build --platform android --profile internal --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Build iOS (macOS only)
  build-ios:
    name: Build iOS App
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build common package
        run: pnpm --filter common build

      - name: Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli eas-cli

      - name: EAS Build (iOS)
        working-directory: ./mobile
        run: |
          eas build --platform ios --profile internal --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Build Android Keyboard
  build-android-keyboard:
    name: Build Android Keyboard
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Build Android Keyboard AAR
        run: |
          cd keyboard-android
          ./gradlew assembleRelease

      - name: Upload Android Keyboard AAR
        uses: actions/upload-artifact@v3
        with:
          name: android-keyboard-aar
          path: keyboard-android/build/outputs/aar/*.aar

  # Build iOS Keyboard
  build-ios-keyboard:
    name: Build iOS Keyboard
    needs: test
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build iOS Keyboard Framework
        run: |
          cd keyboard-ios
          swift build

      - name: Create iOS Keyboard Archive
        run: |
          cd keyboard-ios
          tar -czf phonocorrect-ios-keyboard.tar.gz Sources/

      - name: Upload iOS Keyboard Archive
        uses: actions/upload-artifact@v3
        with:
          name: ios-keyboard-framework
          path: keyboard-ios/phonocorrect-ios-keyboard.tar.gz

  # Create Release
  release:
    name: Create Release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: 
      - build-web
      - build-desktop
      - build-android
      - build-ios
      - build-android-keyboard
      - build-ios-keyboard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Get version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=v$VERSION-${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: Generate QR code distribution page
        run: |
          mkdir -p dist
          cat > dist/qr.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>PhonoCorrect AI - Download</title>
            <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js"></script>
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
                max-width: 800px; 
                margin: 0 auto; 
                padding: 20px; 
                background: #f5f5f5;
              }
              .card { 
                background: white; 
                border-radius: 12px; 
                padding: 24px; 
                margin: 16px 0; 
                box-shadow: 0 2px 12px rgba(0,0,0,0.1);
              }
              .qr-container { 
                text-align: center; 
                margin: 20px 0; 
              }
              .download-btn {
                display: inline-block;
                background: #007AFF;
                color: white;
                padding: 12px 24px;
                border-radius: 8px;
                text-decoration: none;
                margin: 8px;
                font-weight: 500;
              }
              .download-btn:hover {
                background: #0056CC;
              }
              .version-info {
                background: #e8f4fd;
                border: 1px solid #b3d9ff;
                border-radius: 6px;
                padding: 12px;
                margin: 16px 0;
              }
            </style>
          </head>
          <body>
            <div class="card">
              <h1>🧠 PhonoCorrect AI</h1>
              <p>Phonetic spelling assistant for dyslexic and ADHD users</p>
              
              <div class="version-info">
                <strong>Version:</strong> ${{ steps.version.outputs.RELEASE_TAG }}<br>
                <strong>Build Date:</strong> $(date -u +"%Y-%m-%d %H:%M UTC")
              </div>
            </div>

            <div class="card">
              <h2>📱 Mobile Apps</h2>
              <div class="qr-container">
                <canvas id="android-qr" style="max-width: 200px;"></canvas>
                <p><strong>Android APK</strong></p>
                <a href="https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.apk" 
                   class="download-btn">Download APK</a>
              </div>
              
              <div class="qr-container">
                <canvas id="ios-qr" style="max-width: 200px;"></canvas>
                <p><strong>iOS TestFlight</strong></p>
                <a href="https://testflight.apple.com/join/YOUR_TESTFLIGHT_CODE" 
                   class="download-btn">Join TestFlight</a>
              </div>
            </div>

            <div class="card">
              <h2>🖥️ Desktop Apps</h2>
              <a href="https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.dmg" 
                 class="download-btn">📦 macOS (DMG)</a>
              <a href="https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.exe" 
                 class="download-btn">🪟 Windows (EXE)</a>
              <a href="https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.AppImage" 
                 class="download-btn">🐧 Linux (AppImage)</a>
            </div>

            <div class="card">
              <h2>🌐 Browser Extension</h2>
              <a href="https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/phonocorrect-chrome-extension.zip" 
                 class="download-btn">📂 Chrome Extension (ZIP)</a>
              <p><small>Unzip and load unpacked in Chrome Developer Mode</small></p>
            </div>

            <script>
              // Generate QR codes
              const androidUrl = "https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.apk";
              const iosUrl = "https://testflight.apple.com/join/YOUR_TESTFLIGHT_CODE";
              
              QRCode.toCanvas(document.getElementById('android-qr'), androidUrl, {width: 200});
              QRCode.toCanvas(document.getElementById('ios-qr'), iosUrl, {width: 200});
            </script>
          </body>
          </html>
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.RELEASE_TAG }}
          release_name: PhonoCorrect AI ${{ steps.version.outputs.RELEASE_TAG }}
          draft: false
          prerelease: false
          body: |
            ## 🚀 PhonoCorrect AI Release ${{ steps.version.outputs.RELEASE_TAG }}
            
            ### 📱 Mobile Apps
            - **Android APK**: Direct install for testing
            - **iOS IPA**: TestFlight distribution
            
            ### 🖥️ Desktop Apps  
            - **macOS**: Universal binary (Intel + Apple Silicon)
            - **Windows**: x64 and x32 support
            - **Linux**: AppImage and DEB packages
            
            ### 🌐 Browser Extension
            - **Chrome Extension**: Manifest V3 ready
            
            ### 📋 Installation Instructions
            
            **Android APK Sideload:**
            1. Enable "Unknown Sources" in Android Settings
            2. Download APK and tap to install
            3. Or scan QR code: [Download Page](https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/qr.html)
            
            **Desktop Apps:**
            - macOS: Mount DMG and drag to Applications
            - Windows: Run installer EXE
            - Linux: `chmod +x *.AppImage && ./PhonoCorrect*.AppImage`
            
            **Chrome Extension:**
            1. Unzip the extension file
            2. Open `chrome://extensions/`
            3. Enable "Developer mode"
            4. Click "Load unpacked" and select the unzipped folder
            
            ### 🔧 Technical Notes
            - Requires Android 8.0+ (API 26) or iOS 14+
            - Desktop apps require macOS 10.15+, Windows 10+, or Ubuntu 18.04+
            - ML models downloaded on first launch (requires internet)
            
            ### 🐛 Known Issues
            - [ ] TODO: Add Play Store & App Store metadata
            - [ ] TODO: Implement OTA update system
            - [ ] TODO: Add code signing for better security warnings

      - name: Rename and upload release assets
        run: |
          # Create standardized filenames
          mkdir -p release-assets
          
          # Desktop apps - rename to standard format
          if [ -d "desktop-macos" ]; then
            cp desktop-macos/*.dmg "release-assets/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.dmg" 2>/dev/null || true
          fi
          
          if [ -d "desktop-windows" ]; then
            cp desktop-windows/*.exe "release-assets/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.exe" 2>/dev/null || true
          fi
          
          if [ -d "desktop-linux" ]; then
            cp desktop-linux/*.AppImage "release-assets/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.AppImage" 2>/dev/null || true
          fi
          
          # Mobile apps (Note: EAS builds will be available via EAS dashboard)
          # For now, we'll add placeholder files with download instructions
          echo "Download from EAS: https://expo.dev" > "release-assets/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.apk.txt"
          echo "Download from EAS: https://expo.dev" > "release-assets/PhonoCorrectAI-${{ steps.version.outputs.RELEASE_TAG }}.ipa.txt"
          
          # Chrome extension
          if [ -d "chrome-extension" ]; then
            cp chrome-extension/*.zip "release-assets/phonocorrect-chrome-extension.zip" 2>/dev/null || true
          fi
          
          # Upload QR page
          cp dist/qr.html "release-assets/"

      - name: Upload Release Assets
        run: |
          # Upload all assets in release-assets directory
          for file in release-assets/*; do
            if [ -f "$file" ]; then
              echo "Uploading $(basename "$file")"
              gh release upload ${{ steps.version.outputs.RELEASE_TAG }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update QR page with actual download links
        run: |
          echo "✅ Release created: ${{ steps.version.outputs.RELEASE_TAG }}"
          echo "📱 QR Code page: https://github.com/yourusername/phonocorrect-ai/releases/download/${{ steps.version.outputs.RELEASE_TAG }}/qr.html"
          echo "🔗 Release page: https://github.com/yourusername/phonocorrect-ai/releases/tag/${{ steps.version.outputs.RELEASE_TAG }}"